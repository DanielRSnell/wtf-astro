---
import "../styles/global.css";
import { ViewTransitions } from "astro:transitions";
import { Header } from "../components/global/header.tsx";
import { Footer } from "../components/global/footer.tsx";
import SEOMeta from "../components/seo/seo-meta.astro";
import SchemaOrg from "../components/seo/schema-org.astro";

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
  noindex?: boolean;
  article?: any;
  product?: any;
  schemaType?: "WebSite" | "Article" | "Product" | "Review" | "FAQPage" | "Organization" | "BreadcrumbList";
  schemaData?: any;
}

const { 
  title = "WooThatsFast - Premium WordPress Resources", 
  description = "Expert reviews and guides for WordPress themes, plugins, and hosting. Find the best tools for developers and non-coders.",
  image,
  canonical,
  noindex,
  article,
  product,
  schemaType = "WebSite",
  schemaData
} = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Favicon -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    
    <!-- SEO Meta Tags -->
    <SEOMeta 
      title={title}
      description={description}
      image={image}
      canonical={canonical}
      noindex={noindex}
      article={article}
      product={product}
    />
    
    <!-- Schema.org Structured Data -->
    <SchemaOrg type={schemaType} data={schemaData} />
    
    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    
    <!-- Preconnect to external domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <!-- Load signature font -->
    <link href="https://fonts.googleapis.com/css2?family=Kaushan+Script&display=swap" rel="stylesheet">
    
    <!-- ViewTransitions API -->
    <ViewTransitions />
    
    <!-- Umami Analytics -->
    <script defer src="https://analytics.umbral.ai/script.js" data-website-id="a7195ecb-0e35-4cea-8863-e5f2a26e8dc8"></script>
    
    <!-- Enhanced Analytics Tracking -->
    <script is:inline>
      // Analytics with ViewTransitions Support
      (function() {
        // Only initialize once globally
        if (window.WTFAnalyticsInitialized) return;
        window.WTFAnalyticsInitialized = true;
        
        // Initialize global analytics
        window.WTFAnalytics = {
          forms: [],
          pageViews: [],
          currentPage: null
        };

        // Get page metadata
        function getPageMetadata() {
          const path = window.location.pathname;
          const pathParts = path.split('/').filter(Boolean);
          const slug = pathParts[pathParts.length - 1] || 'home';
          
          let pageType = 'other';
          if (path === '/') pageType = 'home';
          else if (path.includes('/blog/')) pageType = 'blog';
          else if (path.includes('/guides/')) pageType = 'guide';
          else if (path.includes('/wordpress-')) pageType = 'resource';
          else if (path.includes('/auth')) pageType = 'auth';
          
          return {
            path,
            title: document.title,
            url: window.location.href,
            slug,
            pageType,
            referrer: document.referrer || 'direct',
            timestamp: new Date().toISOString()
          };
        }

        // Setup form tracking
        function setupFormTracking() {
          // Remove existing listener to avoid duplicates
          document.removeEventListener('submit', handleFormSubmit, true);

          // Add fresh listener
          document.addEventListener('submit', handleFormSubmit, true);
          console.log('[Analytics] Form tracking initialized');
        }

        // Handle form submissions
        async function handleFormSubmit(event) {
          const form = event.target;
          if (form.tagName !== 'FORM') return;

          const formData = new FormData(form);
          const data = {};
          for (let [key, value] of formData.entries()) {
            data[key] = value;
          }

          const pageContext = getPageMetadata();
          const formName = form.getAttribute('name') || form.id || 'unnamed-form';

          const submission = {
            page: pageContext.path,
            slug: pageContext.slug,
            url: pageContext.url,
            form: {
              id: form.id || 'unnamed-form',
              name: formName,
              action: form.action || 'none',
              data: data
            },
            timestamp: new Date().toISOString()
          };

          // Save to localStorage
          const storageKey = 'wtf-form-submissions';
          let submissions = [];
          try {
            const existing = localStorage.getItem(storageKey);
            if (existing) submissions = JSON.parse(existing);
          } catch (e) {}

          submissions.push(submission);
          if (submissions.length > 50) submissions = submissions.slice(-50);

          localStorage.setItem(storageKey, JSON.stringify(submissions));
          localStorage.setItem('wtf-last-form', JSON.stringify(submission));

          // Track with Umami
          if (window.umami) {
            window.umami.track('form-submit', {
              formId: submission.form.id,
              formName: formName,
              page: pageContext.path
            });
          }

          // Send to webhook
          try {
            const webhookData = {
              current: pageContext.url,
              name: formName,
              data: data
            };

            await fetch('https://api.umbral.ai/webhook/3e6eeff1-0e94-4497-8155-fad9df560192', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify(webhookData)
            });

            console.log('[Analytics] Webhook sent successfully');
          } catch (error) {
            console.error('[Analytics] Webhook failed:', error);
          }

          console.log('[Analytics] Form tracked:', submission.form.id);
        }

        // Initialize form tracking on page load
        setupFormTracking();

        // Re-initialize after ViewTransitions navigation
        document.addEventListener('astro:after-swap', setupFormTracking);

        // Expose API for n8n integration
        window.WTFAnalytics.getFormSubmissions = function() {
          try {
            const stored = localStorage.getItem('wtf-form-submissions');
            return stored ? JSON.parse(stored) : [];
          } catch (e) {
            return [];
          }
        };
        
        console.log('[Analytics] Custom tracking initialized (Umami handles page views)');
      })();
    </script>
  </head>
  <body class="min-h-screen overflow-x-hidden bg-background text-foreground antialiased">
    <ViewTransitions />
    <Header client:idle data-theme="bright-dark" />
    <main>
      <slot />
    </main>
    <Footer client:idle data-theme="bright-dark" />
  </body>
</html>