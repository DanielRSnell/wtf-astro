---
import '@/styles/global.css';
import { Badge } from '@/components/ui/badge';
import Favicon from '@/components/favicon.astro';
import { 
  ChevronLeft, 
  ChevronRight, 
  CheckCircle,
  Circle,
  Menu,
  X,
  Zap,
  ArrowLeft
} from 'lucide-react';

export interface Props {
  title: string;
  description: string;
  guide: any;
  sections: any[];
  currentSection?: any;
  currentSectionIndex?: number;
  previousSection?: any;
  nextSection?: any;
  slug: string;
  section?: string;
}

const { 
  title, 
  description, 
  guide, 
  sections, 
  currentSection, 
  currentSectionIndex,
  previousSection,
  nextSection,
  slug,
  section
} = Astro.props;

const isCoursePage = !section;
---

<!DOCTYPE html>
<html lang="en" data-theme="bright-dark">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{title}</title>
    <meta name="description" content={description} />

    <Favicon />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- Umami Analytics -->
    <script defer src="https://analytics.umbral.ai/script.js" data-website-id="a7195ecb-0e35-4cea-8863-e5f2a26e8dc8"></script>
    
    <!-- Guide Navigation Tracking -->
    <script is:inline>
      (function() {
        // Only initialize once globally
        if (window.WTFGuideTrackingInitialized) return;
        window.WTFGuideTrackingInitialized = true;
        
        // Track guide navigation clicks
        document.addEventListener('click', function(e) {
          const link = e.target.closest('a[href*="/guides/"]');
          if (link && window.umami) {
            // Only track internal guide navigation
            if (link.href.includes(window.location.host)) {
              window.umami.track('guide-navigation', {
                from: window.location.pathname,
                to: new URL(link.href).pathname
              });
            }
          }
        }, true);
        
        console.log('[Analytics] Guide navigation tracking initialized');
      })();
    </script>
  </head>
  <body class="bg-background text-foreground">
    <div class="flex h-screen overflow-hidden">
      <!-- Sidebar -->
      <aside class="fixed left-0 top-0 h-full w-80 bg-card/95 backdrop-blur-xl border-r border-border/20 overflow-y-auto hidden lg:flex flex-col z-30">
        <!-- Logo Header -->
        <div class="p-6 border-b border-border/20">
          <a href="/" class="flex items-center gap-2 text-foreground hover:text-primary transition-colors">
            <Zap className="h-6 w-6 text-primary" />
            <span class="text-xl font-bold">WooThatsFast</span>
          </a>
        </div>

        <!-- Course Info -->
        <div class="p-6 border-b border-border/20">
          <a href={`/guides/${slug}`} class="block group">
            <h2 class="text-lg font-bold text-foreground group-hover:text-primary transition-colors">
              {guide.title}
            </h2>
            <p class="text-sm text-muted-foreground mt-1">{guide.lessons} lessons • {guide.duration}</p>
          </a>
        </div>

        <!-- Sections Navigation -->
        <div class="flex-1 overflow-y-auto p-6">
          <nav class="space-y-1">
            {sections.map((s: any, idx: number) => (
              <div key={idx} class="mb-1">
                <a 
                  href={`/guides/${slug}/${s.section || s.id}`}
                  class={`block rounded-lg transition-all ${
                    (!isCoursePage && s.section === section) || (isCoursePage && idx === 0)
                      ? 'bg-primary/10 border border-primary/20' 
                      : 'hover:bg-muted/50'
                  }`}
                >
                  <div class="flex items-start gap-3 p-3">
                    <div class="mt-0.5 flex-shrink-0">
                      {(!isCoursePage && s.section === section) ? (
                        <CheckCircle className="h-5 w-5 text-primary" />
                      ) : (
                        <Circle className="h-5 w-5 text-muted-foreground" />
                      )}
                    </div>
                    <div class="flex-1 min-w-0">
                      <h3 class={`font-semibold text-sm leading-tight ${
                        (!isCoursePage && s.section === section) ? 'text-primary' : 'text-foreground'
                      }`}>
                        {s.title}
                      </h3>
                      {s.description && (
                        <p class="text-xs text-muted-foreground mt-1 line-clamp-2">
                          {s.description}
                        </p>
                      )}
                    </div>
                  </div>
                </a>

                {!isCoursePage && s.section === section && currentSection?.lessons && (
                  <div class="ml-11 mt-2 mb-2 space-y-1">
                    {currentSection.lessons.map((lesson: any, lessonIdx: number) => (
                      <a
                        key={lessonIdx}
                        href={`#${lesson.id}`}
                        class="block py-2 px-3 text-sm text-muted-foreground hover:text-foreground hover:bg-muted/30 rounded transition-colors"
                      >
                        <div class="flex items-center justify-between">
                          <span class="truncate">{lesson.title}</span>
                          {lesson.duration && (
                            <span class="text-xs opacity-60 ml-2 flex-shrink-0">{lesson.duration}</span>
                          )}
                        </div>
                      </a>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </nav>
        </div>

        <!-- Back to Courses -->
        <div class="p-6 border-t border-border/20">
          <a 
            href="/guides" 
            class="flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors"
          >
            <ArrowLeft className="h-4 w-4" />
            <span class="text-sm font-medium">Back to All Courses</span>
          </a>
        </div>
      </aside>

      <!-- Mobile Sidebar Toggle -->
      <button
        id="mobile-menu-toggle"
        class="fixed top-4 left-4 z-50 lg:hidden p-2 bg-card/95 backdrop-blur-xl rounded-lg border border-border/20 shadow-lg"
      >
        <Menu className="h-5 w-5 text-foreground" />
      </button>

      <!-- Mobile Sidebar Overlay -->
      <div id="mobile-sidebar" class="fixed inset-0 bg-black/60 backdrop-blur-sm z-40 lg:hidden hidden">
        <aside class="fixed left-0 top-0 h-full w-80 bg-card/95 backdrop-blur-xl border-r border-border/20 overflow-y-auto flex flex-col">
          <!-- Logo Header -->
          <div class="p-6 border-b border-border/20 flex items-center justify-between">
            <a href="/" class="flex items-center gap-2 text-foreground hover:text-primary transition-colors">
              <Zap className="h-6 w-6 text-primary" />
              <span class="text-xl font-bold">WooThatsFast</span>
            </a>
            <button
              id="mobile-menu-close"
              class="p-2 hover:bg-muted/50 rounded-lg transition-colors"
            >
              <X className="h-5 w-5 text-foreground" />
            </button>
          </div>

          <!-- Course Info -->
          <div class="p-6 border-b border-border/20">
            <a href={`/guides/${slug}`} class="block group">
              <h2 class="text-lg font-bold text-foreground group-hover:text-primary transition-colors">
                {guide.title}
              </h2>
              <p class="text-sm text-muted-foreground mt-1">{guide.lessons} lessons • {guide.duration}</p>
            </a>
          </div>

          <!-- Sections Navigation -->
          <div class="flex-1 overflow-y-auto p-6">
            <nav class="space-y-1">
              {sections.map((s: any, idx: number) => (
                <div key={idx} class="mb-1">
                  <a 
                    href={`/guides/${slug}/${s.section || s.id}`}
                    class={`block rounded-lg transition-all ${
                      (!isCoursePage && s.section === section) || (isCoursePage && idx === 0)
                        ? 'bg-primary/10 border border-primary/20' 
                        : 'hover:bg-muted/50'
                    }`}
                  >
                    <div class="flex items-start gap-3 p-3">
                      <div class="mt-0.5 flex-shrink-0">
                        {(!isCoursePage && s.section === section) ? (
                          <CheckCircle className="h-5 w-5 text-primary" />
                        ) : (
                          <Circle className="h-5 w-5 text-muted-foreground" />
                        )}
                      </div>
                      <div class="flex-1 min-w-0">
                        <h3 class={`font-semibold text-sm leading-tight ${
                          (!isCoursePage && s.section === section) ? 'text-primary' : 'text-foreground'
                        }`}>
                          {s.title}
                        </h3>
                        {s.description && (
                          <p class="text-xs text-muted-foreground mt-1 line-clamp-2">
                            {s.description}
                          </p>
                        )}
                      </div>
                    </div>
                  </a>
                  
                  {!isCoursePage && s.section === section && currentSection?.lessons && (
                    <div class="ml-11 mt-2 mb-2 space-y-1">
                      {currentSection.lessons.map((lesson: any, lessonIdx: number) => (
                        <a
                          key={lessonIdx}
                          href={`#${lesson.id}`}
                          class="block py-2 px-3 text-sm text-muted-foreground hover:text-foreground hover:bg-muted/30 rounded transition-colors"
                        >
                          <div class="flex items-center justify-between">
                            <span class="truncate">{lesson.title}</span>
                            {lesson.duration && (
                              <span class="text-xs opacity-60 ml-2 flex-shrink-0">{lesson.duration}</span>
                            )}
                          </div>
                        </a>
                      ))}
                    </div>
                  )}
                </div>
              ))}
            </nav>
          </div>

          <!-- Back to Courses -->
          <div class="p-6 border-t border-border/20">
            <a 
              href="/guides" 
              class="flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors"
            >
              <ArrowLeft className="h-4 w-4" />
              <span class="text-sm font-medium">Back to All Courses</span>
            </a>
          </div>
        </aside>
      </div>

      <!-- Main Content -->
      <main class="flex-1 lg:ml-80 overflow-y-auto">
        <!-- Header -->
        <header class="sticky top-0 z-20 bg-background/95 backdrop-blur-xl border-b border-border/20">
          <div class="px-6 py-4">
            <div class="flex items-center justify-between">
              <div class="min-w-0 flex-1 mr-4">
                <div class="flex items-center gap-2 text-sm text-muted-foreground mb-2">
                  <a href="/guides" class="hover:text-primary transition-colors">Guides</a>
                  <ChevronRight className="h-4 w-4 flex-shrink-0" />
                  {!isCoursePage && (
                    <>
                      <a href={`/guides/${slug}`} class="hover:text-primary transition-colors truncate">
                        {guide.title}
                      </a>
                      <ChevronRight className="h-4 w-4 flex-shrink-0" />
                    </>
                  )}
                  <span class="text-foreground truncate">
                    {currentSection ? currentSection.title : guide.title}
                  </span>
                </div>
              </div>
              
              {!isCoursePage && currentSectionIndex !== undefined && (
                <Badge variant="outline" class="bg-muted/60 flex-shrink-0">
                  Section {currentSectionIndex + 1} of {sections.length}
                </Badge>
              )}
            </div>
          </div>
        </header>

        <!-- Content -->
        <article class="px-6 py-12 max-w-4xl mx-auto">
          <div class="prose  max-w-none bg-muted/50 backdrop-blur-sm  border border-border rounded-3xl px-24 py-16
            prose-headings:text-foreground 
            prose-p:text-foreground/90 
            prose-strong:text-foreground 
            prose-em:text-foreground/90
            prose-a:text-primary hover:prose-a:text-primary/80 
            prose-blockquote:text-foreground/80 prose-blockquote:border-primary/30
            prose-code:text-foreground prose-code:bg-muted/20 prose-code:px-1 prose-code:py-0.5 prose-code:rounded
            prose-pre:bg-muted/10 prose-pre:text-foreground/90
            prose-ul:text-foreground/90 prose-li:text-foreground/90
            prose-ol:text-foreground/90
            prose-hr:border-border/50
            prose-table:text-foreground prose-th:text-foreground prose-td:text-foreground/90
            prose-h1:text-foreground prose-h2:text-foreground prose-h3:text-foreground prose-h4:text-foreground
            prose-lead:text-foreground/90">
            <slot />
          </div>

          <!-- Navigation (only for section pages) -->
          {!isCoursePage && (
            <nav class="mt-16 pt-8 border-t border-border/20">
              <div class="flex items-center justify-between">
                {previousSection ? (
                  <a
                    href={`/guides/${slug}/${previousSection.section}`}
                    class="group flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors"
                  >
                    <ChevronLeft className="h-5 w-5 transition-transform group-hover:-translate-x-1" />
                    <div class="text-left">
                      <div class="text-sm">Previous</div>
                      <div class="font-semibold">{previousSection.title}</div>
                    </div>
                  </a>
                ) : (
                  <div />
                )}

                {nextSection ? (
                  <a
                    href={`/guides/${slug}/${nextSection.section}`}
                    class="group flex items-center gap-2 text-muted-foreground hover:text-primary transition-colors text-right"
                  >
                    <div>
                      <div class="text-sm">Next</div>
                      <div class="font-semibold">{nextSection.title}</div>
                    </div>
                    <ChevronRight className="h-5 w-5 transition-transform group-hover:translate-x-1" />
                  </a>
                ) : (
                  <a
                    href={`/guides/${slug}`}
                    class="group flex items-center gap-2 text-primary font-semibold"
                  >
                    <CheckCircle className="h-5 w-5" />
                    Complete Course
                  </a>
                )}
              </div>
            </nav>
          )}
        </article>
      </main>
    </div>

    <!-- Mobile Menu Script -->
    <script>
      const toggle = document.getElementById('mobile-menu-toggle');
      const closeBtn = document.getElementById('mobile-menu-close');
      const sidebar = document.getElementById('mobile-sidebar');
      
      toggle?.addEventListener('click', () => {
        sidebar?.classList.remove('hidden');
      });

      closeBtn?.addEventListener('click', () => {
        sidebar?.classList.add('hidden');
      });

      sidebar?.addEventListener('click', (e) => {
        if (e.target === sidebar) {
          sidebar.classList.add('hidden');
        }
      });
    </script>
  </body>
</html>