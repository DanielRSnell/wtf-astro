---
export const prerender = false;
import Layout from '../../../layouts/base.astro';
import { BlogCategoryArchive } from '../../../components/blog-category-archive.tsx';
import { getCollection } from 'astro:content';


export async function getStaticPaths() {
  const allPosts = await getCollection('blog', ({ data }) => !data.draft);
  
  // Get unique categories
  const categories = [...new Set(allPosts.map(post => post.data.category))];
  
  return categories.map((category) => {
    const categoryPosts = allPosts.filter(post => post.data.category === category);
    
    return {
      params: { category },
      props: { 
        posts: categoryPosts.sort((a, b) => b.data.date.getTime() - a.data.date.getTime()),
        categorySlug: category
      }
    };
  });
}

const { category } = Astro.params;
const { posts, categorySlug } = Astro.props;

// Get all categories for the sidebar
const allPosts = await getCollection('blog', ({ data }) => !data.draft);
const blogCategories = allPosts.reduce((acc, post) => {
  const cat = post.data.category;
  const existing = acc.find(c => c.slug === cat);
  if (existing) {
    existing.count++;
  } else {
    acc.push({
      name: cat.charAt(0).toUpperCase() + cat.slice(1).replace('-', ' '),
      slug: cat,
      count: 1
    });
  }
  return acc;
}, [] as Array<{ name: string; slug: string; count: number; }>).sort((a, b) => a.slug.localeCompare(b.slug));

// Load category content
let categoryData;
try {
  const categoryEntry = await getCollection('categories');
  const categoryContent = categoryEntry.find(entry => entry.slug === categorySlug);
  categoryData = categoryContent?.data;
} catch (error) {
  categoryData = null;
}

// Fallback values
const categoryName = categoryData?.title || categorySlug.charAt(0).toUpperCase() + categorySlug.slice(1).replace('-', ' ');
const title = `${categoryName} Articles & Tutorials | Blocksy Components Blog`;
const description = categoryData?.description || `Expert ${categoryName.toLowerCase()} articles, tutorials, and guides. Browse ${posts.length} in-depth posts covering WordPress development, optimization, and best practices.`;

// Create breadcrumb schema
const breadcrumbSchema = {
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "item": {
        "@id": "https://blocksy-components.com",
        "name": "Home"
      }
    },
    {
      "@type": "ListItem",
      "position": 2,
      "item": {
        "@id": "https://blocksy-components.com/blog",
        "name": "Blog"
      }
    },
    {
      "@type": "ListItem",
      "position": 3,
      "item": {
        "@id": `https://blocksy-components.com/blog/category/${categorySlug}`,
        "name": categoryName
      }
    }
  ]
};

// Create CollectionPage schema
const collectionPageSchema = {
  "@type": "CollectionPage",
  "name": title,
  "description": description,
  "url": `https://blocksy-components.com/blog/category/${categorySlug}`,
  "breadcrumb": breadcrumbSchema,
  "mainEntity": {
    "@type": "ItemList",
    "numberOfItems": posts.length,
    "itemListElement": posts.slice(0, 10).map((post, index) => ({
      "@type": "BlogPosting",
      "position": index + 1,
      "url": `https://blocksy-components.com/blog/${post.slug}`,
      "headline": post.data.title,
      "description": post.data.description,
      "datePublished": post.data.date.toISOString(),
      "dateModified": post.data.lastModified?.toISOString() || post.data.date.toISOString(),
      "author": {
        "@type": "Person",
        "name": post.data.author
      }
    }))
  }
};
---

<Layout 
  title={title} 
  description={description}
  image="/open-graph.png"
  schemaType="CollectionPage"
  schemaData={collectionPageSchema}
>
  <BlogCategoryArchive 
    client:load 
    data-theme="bright-dark" 
    posts={posts} 
    categories={blogCategories} 
    activeCategory={categorySlug}
    title={title}
    description={description}
  />
</Layout>