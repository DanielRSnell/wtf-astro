---
import Layout from '@layouts/base.astro';
import { createSupabaseSSR } from '@/lib/supabase-ssr';

export const prerender = false;

// Server-side authentication check
let user = null;
let profile = null;
let error = null;

const supabase = createSupabaseSSR(Astro.cookies);

try {
  const { data: { user: authUser }, error: authError } = await supabase.auth.getUser();
  
  if (authError || !authUser) {
    error = 'Please sign in to access settings';
  } else {
    user = authUser;
    
    // Get profile data
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', user.id)
      .single();
      
    if (profileError) {
      error = `Profile error: ${profileError.message}`;
    } else {
      profile = profileData;
    }
  }
} catch (e) {
  console.error('SSR auth error:', e);
  error = 'Authentication error';
}
---

<Layout title="Settings">
  <div class="relative min-h-screen pt-24 pb-16 bg-background text-foreground overflow-hidden" data-theme="bright-dark">
    <!-- Dot Pattern Background -->
    <div class="absolute inset-0 h-full w-full [mask-image:radial-gradient(600px_circle_at_center,white,transparent)]">
      <div class="absolute inset-0 opacity-80">
        <svg width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
          <defs>
            <pattern id="dot-pattern-settings" x="0" y="0" width="30" height="30" patternUnits="userSpaceOnUse">
              <circle cx="15" cy="15" r="2" fill="currentColor" class="text-primary"/>
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill="url(#dot-pattern-settings)"/>
        </svg>
      </div>
    </div>
    
    <!-- Gradient Overlay -->
    <div class="absolute inset-0 bg-gradient-to-b from-transparent via-background/80 to-background pointer-events-none" />
    
    <!-- Blur elements for depth -->
    <div class="absolute -top-40 -right-40 h-80 w-80 rounded-full bg-primary/5 blur-3xl" />
    <div class="absolute -bottom-40 -left-40 h-80 w-80 rounded-full bg-primary/5 blur-3xl" />

    <div class="container relative z-10 mx-auto px-6">
      <div class="max-w-4xl mx-auto">
        
        {error ? (
          <!-- Error State -->
          <div class="max-w-2xl mx-auto text-center">
            <h1 class="text-3xl font-bold text-foreground mb-4">Access Required</h1>
            <p class="text-muted-foreground mb-8">{error}</p>
            <a 
              href="/login" 
              class="inline-flex items-center px-6 py-3 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
            >
              Sign In
            </a>
          </div>
        ) : (
          <!-- Settings Content -->
          <>
            <!-- Back Navigation -->
            <div class="mb-6">
              <a href="/profile" class="inline-flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                <span>Back to Profile</span>
              </a>
            </div>

            <!-- Settings Header -->
            <div class="mb-8">
              <h1 class="text-4xl font-bold text-foreground mb-2">Account Settings</h1>
              <p class="text-muted-foreground">Manage your account preferences and information</p>
            </div>

            <!-- Profile Settings -->
            <div class="space-y-8">
              <!-- Profile Information -->
              <div class="group relative overflow-hidden rounded-2xl bg-card/60 backdrop-blur-xl border border-border/20">
                <div class="absolute inset-0">
                  <div class="absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-secondary/5"></div>
                  <div class="absolute inset-0 bg-gradient-to-t from-card/40 via-transparent to-transparent"></div>
                </div>
                
                <div class="relative z-10 p-8">
                  <div class="flex items-center justify-between mb-6">
                    <h2 class="text-2xl font-bold text-foreground">Profile Information</h2>
                    <button 
                      id="editProfileBtn"
                      class="px-4 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors text-sm"
                    >
                      Edit Profile
                    </button>
                  </div>

                  <form id="profileForm" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label for="username" class="block text-sm font-medium text-foreground mb-2">
                          Username
                        </label>
                        <div class="flex items-center space-x-2">
                          <span class="text-muted-foreground">@</span>
                          <input
                            type="text"
                            id="username"
                            value={profile?.username || ''}
                            disabled
                            class="flex-1 px-4 py-3 bg-background/50 border border-border/30 rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary/50 transition-colors disabled:opacity-50"
                          />
                        </div>
                        <p class="text-sm text-muted-foreground mt-1">
                          Your profile URL: /user/<span id="usernamePreview">{profile?.username || 'username'}</span>
                        </p>
                      </div>
                      <div>
                        <label for="fullName" class="block text-sm font-medium text-foreground mb-2">
                          Full Name
                        </label>
                        <input
                          type="text"
                          id="fullName"
                          value={profile?.full_name || ''}
                          disabled
                          class="w-full px-4 py-3 bg-background/50 border border-border/30 rounded-lg text-foreground placeholder-muted-foreground focus:outline-none focus:ring-2 focus:ring-primary/50 focus:border-primary/50 transition-colors disabled:opacity-50"
                        />
                      </div>
                    </div>
                    <div>
                      <label for="email" class="block text-sm font-medium text-foreground mb-2">
                        Email Address
                      </label>
                      <input
                        type="email"
                        id="email"
                        value={user?.email || ''}
                        disabled
                        class="w-full px-4 py-3 bg-muted/20 border border-border/30 rounded-lg text-muted-foreground"
                      />
                      <p class="text-sm text-muted-foreground mt-1">
                        Contact support to change your email address
                      </p>
                    </div>
                    
                    <div class="hidden" id="profileActions">
                      <div class="flex gap-4 pt-4">
                        <button
                          type="submit"
                          class="px-6 py-2 bg-primary text-primary-foreground rounded-lg hover:bg-primary/90 transition-colors"
                        >
                          Save Changes
                        </button>
                        <button
                          type="button"
                          id="cancelEditBtn"
                          class="px-6 py-2 bg-secondary text-secondary-foreground rounded-lg hover:bg-secondary/90 transition-colors"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  </form>

                  <div id="profileMessage" class="mt-4 text-sm"></div>
                </div>
                
                <!-- Hover border highlight -->
                <div class="absolute inset-x-0 top-0 h-px bg-gradient-to-r from-transparent via-primary/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              </div>

              <!-- Account Actions -->
              <div class="group relative overflow-hidden rounded-2xl bg-card/60 backdrop-blur-xl border border-border/20">
                <div class="absolute inset-0">
                  <div class="absolute inset-0 bg-gradient-to-br from-destructive/5 via-transparent to-destructive/5"></div>
                  <div class="absolute inset-0 bg-gradient-to-t from-card/40 via-transparent to-transparent"></div>
                </div>
                
                <div class="relative z-10 p-8">
                  <h2 class="text-2xl font-bold text-foreground mb-6">Account Actions</h2>
                  
                  <div class="space-y-4">
                    <form action="/api/auth/signout" method="POST" class="inline-block">
                      <button
                        type="submit"
                        class="px-6 py-3 bg-destructive text-destructive-foreground rounded-lg hover:bg-destructive/90 transition-colors"
                      >
                        Sign Out
                      </button>
                    </form>
                  </div>
                </div>
                
                <!-- Hover border highlight -->
                <div class="absolute inset-x-0 top-0 h-px bg-gradient-to-r from-transparent via-destructive/50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              </div>
            </div>
          </>
        )}
      </div>
    </div>
  </div>

  {!error && (
    <script define:vars={{ user, profile }}>
      const editBtn = document.getElementById('editProfileBtn');
      const cancelBtn = document.getElementById('cancelEditBtn');
      const profileForm = document.getElementById('profileForm');
      const profileActions = document.getElementById('profileActions');
      const usernameInput = document.getElementById('username');
      const usernamePreview = document.getElementById('usernamePreview');
      const fullNameInput = document.getElementById('fullName');
      const messageDiv = document.getElementById('profileMessage');
      
      let isEditing = false;
      let originalValues = {
        username: usernameInput.value,
        fullName: fullNameInput.value
      };

      // Update username preview
      usernameInput.addEventListener('input', () => {
        const value = usernameInput.value.trim() || 'username';
        usernamePreview.textContent = value;
      });

      editBtn.addEventListener('click', () => {
        if (!isEditing) {
          // Enable editing
          isEditing = true;
          usernameInput.disabled = false;
          fullNameInput.disabled = false;
          profileActions.classList.remove('hidden');
          editBtn.textContent = 'Editing...';
          editBtn.disabled = true;
        }
      });

      cancelBtn.addEventListener('click', () => {
        // Cancel editing
        isEditing = false;
        usernameInput.disabled = true;
        fullNameInput.disabled = true;
        usernameInput.value = originalValues.username;
        fullNameInput.value = originalValues.fullName;
        usernamePreview.textContent = originalValues.username;
        profileActions.classList.add('hidden');
        editBtn.textContent = 'Edit Profile';
        editBtn.disabled = false;
        messageDiv.innerHTML = '';
      });

      profileForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const username = usernameInput.value.trim();
        const fullName = fullNameInput.value.trim();
        
        messageDiv.innerHTML = '';
        
        // Basic validation
        if (!username) {
          messageDiv.innerHTML = '<div class="text-red-600">Username is required</div>';
          return;
        }
        
        // Check username format
        if (!/^[a-zA-Z0-9_]+$/.test(username)) {
          messageDiv.innerHTML = '<div class="text-red-600">Username can only contain letters, numbers, and underscores</div>';
          return;
        }
        
        if (username.length < 3 || username.length > 30) {
          messageDiv.innerHTML = '<div class="text-red-600">Username must be between 3 and 30 characters</div>';
          return;
        }
        
        try {
          messageDiv.innerHTML = '<div class="text-muted-foreground">Saving changes...</div>';
          
          const response = await fetch('/api/update-profile', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              username: username,
              fullName: fullName
            })
          });

          const data = await response.json();

          if (response.ok) {
            messageDiv.innerHTML = '<div class="text-green-600">Profile updated successfully!</div>';
            originalValues.username = username;
            originalValues.fullName = fullName;
            
            // Exit editing mode
            isEditing = false;
            usernameInput.disabled = true;
            fullNameInput.disabled = true;
            profileActions.classList.add('hidden');
            editBtn.textContent = 'Edit Profile';
            editBtn.disabled = false;
            
            // If username changed, redirect to new URL after a delay
            if (username !== profile.username) {
              setTimeout(() => {
                window.location.href = `/user/${username}`;
              }, 1500);
            }
          } else {
            messageDiv.innerHTML = `<div class="text-red-600">Error: ${data.error}</div>`;
          }

        } catch (error) {
          messageDiv.innerHTML = `<div class="text-red-600">Network error: ${error.message}</div>`;
        }
      });
    </script>
  )}
</Layout>